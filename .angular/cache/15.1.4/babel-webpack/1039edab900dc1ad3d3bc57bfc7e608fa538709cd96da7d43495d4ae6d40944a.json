{"ast":null,"code":"import Chart from 'chart.js/auto';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"lineCanvas\"];\nexport class LineChartComponent {\n  constructor() {\n    this.data = [];\n  }\n  ngAfterViewInit() {\n    this.lineChartMethod();\n  }\n  ngOnChanges() {\n    if (this.data.length > 0) {\n      this.updateChart();\n    }\n  }\n  updateChart() {\n    const labels = this.data.map(item => {\n      return item.day + 1;\n    });\n    const data = this.data.map(item => {\n      return item.price;\n    });\n    this.lineChart.data.labels = labels;\n    this.lineChart.data.datasets = [{\n      data\n    }];\n    this.lineChart.update();\n  }\n  lineChartMethod() {\n    const labels = [];\n    const datasets = [];\n    this.lineChart = new Chart(this.lineCanvas?.nativeElement, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{\n          fill: false,\n          backgroundColor: 'rgba(63,80,181,0.4)',\n          borderColor: '#3f50b5',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: '#3f50b5',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: '#3f50b5',\n          pointHoverBorderColor: '#3f50b5',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: datasets,\n          spanGaps: false\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      }\n    });\n  }\n}\nLineChartComponent.ɵfac = function LineChartComponent_Factory(t) {\n  return new (t || LineChartComponent)();\n};\nLineChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LineChartComponent,\n  selectors: [[\"app-line-chart\"]],\n  viewQuery: function LineChartComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.lineCanvas = _t.first);\n    }\n  },\n  inputs: {\n    data: \"data\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 3,\n  vars: 0,\n  consts: [[\"lineCanvas\", \"\"]],\n  template: function LineChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵelement(1, \"canvas\", null, 0);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAOA,OAAOA,KAAK,MAAM,eAAe;;;AAUjC,OAAM,MAAOC,kBAAkB;EAK7BC;IAJS,SAAI,GAAiB,EAAE;EAIjB;EAEfC,eAAe;IACb,IAAI,CAACC,eAAe,EAAE;EACxB;EAEAC,WAAW;IACT,IAAI,IAAI,CAACC,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;MACxB,IAAI,CAACC,WAAW,EAAE;;EAEtB;EAEAA,WAAW;IACT,MAAMC,MAAM,GAAa,IAAI,CAACH,IAAI,CAACI,GAAG,CAAEC,IAAI,IAAI;MAC9C,OAAOA,IAAI,CAACC,GAAG,GAAG,CAAC;IACrB,CAAC,CAAC;IACF,MAAMN,IAAI,GAAG,IAAI,CAACA,IAAI,CAACI,GAAG,CAAEC,IAAI,IAAI;MAClC,OAAOA,IAAI,CAACE,KAAK;IACnB,CAAC,CAAC;IACF,IAAI,CAACC,SAAS,CAACR,IAAI,CAACG,MAAM,GAAGA,MAAM;IACnC,IAAI,CAACK,SAAS,CAACR,IAAI,CAACS,QAAQ,GAAG,CAAC;MAAET;IAAI,CAAE,CAAC;IACzC,IAAI,CAACQ,SAAS,CAACE,MAAM,EAAE;EACzB;EAEAZ,eAAe;IACb,MAAMK,MAAM,GAAa,EAAE;IAC3B,MAAMM,QAAQ,GAAa,EAAE;IAE7B,IAAI,CAACD,SAAS,GAAG,IAAId,KAAK,CAAC,IAAI,CAACiB,UAAU,EAAEC,aAAa,EAAE;MACzDC,IAAI,EAAE,MAAM;MACZb,IAAI,EAAE;QACJG,MAAM,EAAEA,MAAM;QACdM,QAAQ,EAAE,CACR;UACEK,IAAI,EAAE,KAAK;UACXC,eAAe,EAAE,qBAAqB;UACtCC,WAAW,EAAE,SAAS;UACtBC,cAAc,EAAE,MAAM;UACtBC,UAAU,EAAE,EAAE;UACdC,gBAAgB,EAAE,GAAG;UACrBC,eAAe,EAAE,OAAO;UACxBC,gBAAgB,EAAE,SAAS;UAC3BC,oBAAoB,EAAE,MAAM;UAC5BC,gBAAgB,EAAE,CAAC;UACnBC,gBAAgB,EAAE,CAAC;UACnBC,yBAAyB,EAAE,SAAS;UACpCC,qBAAqB,EAAE,SAAS;UAChCC,qBAAqB,EAAE,CAAC;UACxBC,WAAW,EAAE,CAAC;UACdC,cAAc,EAAE,EAAE;UAClB7B,IAAI,EAAES,QAAQ;UACdqB,QAAQ,EAAE;SACX;OAEJ;MACDC,OAAO,EAAE;QACPC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,OAAO,EAAE;;;;KAIhB,CAAC;EACJ;;AApEWvC,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;QAAlBA,kBAAkB;EAAAwC;EAAAC;IAAA;;;;;;;;;;;;;;;;;MCjB/BC,2BAAK;MACHA,kCAA6B;MAC/BA,iBAAM","names":["Chart","LineChartComponent","constructor","ngAfterViewInit","lineChartMethod","ngOnChanges","data","length","updateChart","labels","map","item","day","price","lineChart","datasets","update","lineCanvas","nativeElement","type","fill","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","spanGaps","options","plugins","legend","display","selectors","viewQuery","i0"],"sourceRoot":"","sources":["C:\\Users\\pablo\\OneDrive\\Documentos\\Projetos\\grafico-variacao\\src\\app\\dashboard\\line-chart\\line-chart.component.ts","C:\\Users\\pablo\\OneDrive\\Documentos\\Projetos\\grafico-variacao\\src\\app\\dashboard\\line-chart\\line-chart.component.html"],"sourcesContent":["import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport Chart from 'chart.js/auto';\nimport { IVariation } from 'src/app/core/models/variation.model';\n\n\n\n@Component({\n  selector: 'app-line-chart',\n  templateUrl: './line-chart.component.html',\n  styleUrls: ['./line-chart.component.scss'],\n})\nexport class LineChartComponent implements AfterViewInit {\n  @Input() data: IVariation[] = [];\n  @ViewChild('lineCanvas') lineCanvas: ElementRef | undefined;\n  lineChart: any;\n\n  constructor() {}\n\n  ngAfterViewInit(): void {\n    this.lineChartMethod();\n  }\n\n  ngOnChanges() {\n    if (this.data.length > 0) {\n      this.updateChart();\n    }\n  }\n\n  updateChart() {\n    const labels: number[] = this.data.map((item) => {\n      return item.day + 1;\n    });\n    const data = this.data.map((item) => {\n      return item.price;\n    });\n    this.lineChart.data.labels = labels;\n    this.lineChart.data.datasets = [{ data }];\n    this.lineChart.update();\n  }\n\n  lineChartMethod() {\n    const labels: string[] = [];\n    const datasets: number[] = [];\n\n    this.lineChart = new Chart(this.lineCanvas?.nativeElement, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            fill: false,\n            backgroundColor: 'rgba(63,80,181,0.4)',\n            borderColor: '#3f50b5',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: '#3f50b5',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: '#3f50b5',\n            pointHoverBorderColor: '#3f50b5',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: datasets,\n            spanGaps: false,\n          },\n        ],\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: false,\n          },\n        },\n      },\n    });\n  }\n}\n","<div>\n  <canvas #lineCanvas></canvas>\n</div>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { finalize } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/loading.service\";\nexport class LoadingInterceptor {\n  constructor(loadingService) {\n    this.loadingService = loadingService;\n    this.activeRequests = 0;\n  }\n  intercept(request, next) {\n    if (this.activeRequests === 0) {\n      this.loadingService.show();\n    }\n    this.activeRequests++;\n    return next.handle(request).pipe(finalize(() => {\n      this.activeRequests--;\n      if (this.activeRequests === 0) {\n        this.loadingService.hide();\n      }\n    }));\n  }\n}\nLoadingInterceptor.ɵfac = function LoadingInterceptor_Factory(t) {\n  return new (t || LoadingInterceptor)(i0.ɵɵinject(i1.LoadingService));\n};\nLoadingInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoadingInterceptor,\n  factory: LoadingInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAOA,SAASA,QAAQ,QAAoB,MAAM;;;AAI3C,OAAM,MAAOC,kBAAkB;EAG7BC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;IAF1B,mBAAc,GAAG,CAAC;EAE2B;EAErDC,SAAS,CACPC,OAA6B,EAC7BC,IAAiB;IAEjB,IAAI,IAAI,CAACC,cAAc,KAAK,CAAC,EAAE;MAC7B,IAAI,CAACJ,cAAc,CAACK,IAAI,EAAE;;IAG5B,IAAI,CAACD,cAAc,EAAE;IAErB,OAAOD,IAAI,CAACG,MAAM,CAACJ,OAAO,CAAC,CAACK,IAAI,CAC9BV,QAAQ,CAAC,MAAK;MACZ,IAAI,CAACO,cAAc,EAAE;MAErB,IAAI,IAAI,CAACA,cAAc,KAAK,CAAC,EAAE;QAC7B,IAAI,CAACJ,cAAc,CAACQ,IAAI,EAAE;;IAE9B,CAAC,CAAC,CACH;EACH;;AAxBWV,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAW,SAAlBX,kBAAkB;AAAA","names":["finalize","LoadingInterceptor","constructor","loadingService","intercept","request","next","activeRequests","show","handle","pipe","hide","factory"],"sourceRoot":"","sources":["C:\\Users\\pablo\\OneDrive\\Documentos\\Projetos\\grafico-variacao\\src\\app\\core\\interceptors\\loading.interceptor.ts"],"sourcesContent":["import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { finalize, Observable } from 'rxjs';\r\nimport { LoadingService } from '../services/loading.service';\r\n\r\n@Injectable()\r\nexport class LoadingInterceptor implements HttpInterceptor {\r\n  private activeRequests = 0;\r\n\r\n  constructor(private loadingService: LoadingService) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<unknown>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<unknown>> {\r\n    if (this.activeRequests === 0) {\r\n      this.loadingService.show();\r\n    }\r\n\r\n    this.activeRequests++;\r\n\r\n    return next.handle(request).pipe(\r\n      finalize(() => {\r\n        this.activeRequests--;\r\n\r\n        if (this.activeRequests === 0) {\r\n          this.loadingService.hide();\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
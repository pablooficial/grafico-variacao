{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/message.service\";\nexport class HttpErrorInterceptor {\n  constructor(messageService) {\n    this.messageService = messageService;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(err => {\n      if (!environment.production) {\n        console.log(err);\n      }\n      let errorMsg = '';\n      if (err.error instanceof ErrorEvent) {\n        errorMsg = `Error: ${err.error.message}`;\n      } else if (Array.isArray(err.error) && err.error.length) {\n        errorMsg = `Error: ${err.error[0]}`;\n      } else if (err.error.errors) {\n        errorMsg = `Error: ${err.error.errors}`;\n      } else {\n        errorMsg = `Error Code: ${err.status}, Message: ${err.message}`;\n      }\n      this.messageService.add(errorMsg);\n      return throwError(() => new Error(errorMsg));\n    }));\n  }\n}\nHttpErrorInterceptor.ɵfac = function HttpErrorInterceptor_Factory(t) {\n  return new (t || HttpErrorInterceptor)(i0.ɵɵinject(i1.MessageService));\n};\nHttpErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpErrorInterceptor,\n  factory: HttpErrorInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAcC,UAAU,QAAQ,MAAM;AACzD,SAASC,WAAW,QAAQ,mCAAmC;;;AAI/D,OAAM,MAAOC,oBAAoB;EAC/BC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;EAClC;EAEAC,SAAS,CACPC,OAA6B,EAC7BC,IAAiB;IAEjB,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9BV,UAAU,CAAEW,GAAsB,IAAI;MACpC,IAAI,CAACT,WAAW,CAACU,UAAU,EAAE;QAC3BC,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC;;MAGlB,IAAII,QAAQ,GAAG,EAAE;MAEjB,IAAIJ,GAAG,CAACK,KAAK,YAAYC,UAAU,EAAE;QACnCF,QAAQ,GAAG,UAAUJ,GAAG,CAACK,KAAK,CAACE,OAAO,EAAE;OACzC,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACT,GAAG,CAACK,KAAK,CAAC,IAAIL,GAAG,CAACK,KAAK,CAACK,MAAM,EAAE;QACvDN,QAAQ,GAAG,UAAUJ,GAAG,CAACK,KAAK,CAAC,CAAC,CAAC,EAAE;OACpC,MAAM,IAAIL,GAAG,CAACK,KAAK,CAACM,MAAM,EAAE;QAC3BP,QAAQ,GAAG,UAAUJ,GAAG,CAACK,KAAK,CAACM,MAAM,EAAE;OACxC,MAAM;QACLP,QAAQ,GAAG,eAAeJ,GAAG,CAACY,MAAM,cAAcZ,GAAG,CAACO,OAAO,EAAE;;MAGjE,IAAI,CAACb,cAAc,CAACmB,GAAG,CAACT,QAAQ,CAAC;MACjC,OAAOd,UAAU,CAAC,MAAM,IAAIwB,KAAK,CAACV,QAAQ,CAAC,CAAC;IAC9C,CAAC,CAAC,CACH;EACH;;AA9BWZ,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;SAApBA,oBAAoB;EAAAuB,SAApBvB,oBAAoB;AAAA","names":["catchError","throwError","environment","HttpErrorInterceptor","constructor","messageService","intercept","request","next","handle","pipe","err","production","console","log","errorMsg","error","ErrorEvent","message","Array","isArray","length","errors","status","add","Error","factory"],"sourceRoot":"","sources":["C:\\Users\\pablo\\OneDrive\\Documentos\\Projetos\\grafico-variacao\\src\\app\\core\\interceptors\\http-error.interceptor.ts"],"sourcesContent":["import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, Observable, throwError } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { MessageService } from '../services/message.service';\r\n\r\n@Injectable()\r\nexport class HttpErrorInterceptor implements HttpInterceptor {\r\n  constructor(private messageService: MessageService) {\r\n  }\r\n\r\n  intercept(\r\n    request: HttpRequest<unknown>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<unknown>> {\r\n    return next.handle(request).pipe(\r\n      catchError((err: HttpErrorResponse) => {\r\n        if (!environment.production) {\r\n          console.log(err);\r\n        }\r\n\r\n        let errorMsg = '';\r\n\r\n        if (err.error instanceof ErrorEvent) {\r\n          errorMsg = `Error: ${err.error.message}`;\r\n        } else if (Array.isArray(err.error) && err.error.length) {\r\n          errorMsg = `Error: ${err.error[0]}`;\r\n        } else if (err.error.errors) {\r\n          errorMsg = `Error: ${err.error.errors}`;\r\n        } else {\r\n          errorMsg = `Error Code: ${err.status}, Message: ${err.message}`;\r\n        }\r\n\r\n        this.messageService.add(errorMsg);\r\n        return throwError(() => new Error(errorMsg));\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { map, tap } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class FinanceService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.financeUrl = environment.baseUrl;\n  }\n  getAll(ativo, limit = 30) {\n    return this.http.get(`${this.financeUrl}/${ativo}`).pipe(map(finance => this.formattedResult(finance, limit)), tap(() => this.log(`Consultou o ativo: ${ativo}`)));\n  }\n  formattedResult(finance, limit) {\n    try {\n      const result = finance.chart.result[0];\n      const timestamps = result.timestamp.slice(limit * -1);\n      const quotes = result.indicators.quote[0].open.slice(limit * -1);\n      const variances = quotes.map((price, index) => {\n        const date = timestamps[index] * 1000;\n        let variationDMinusOne = 0;\n        let firstDateVariation = 0;\n        if (index > 0 && price > 0) {\n          variationDMinusOne = this.calculateVariance(price, quotes[index - 1]);\n          firstDateVariation = this.calculateVariance(price, quotes[0]);\n        }\n        return {\n          day: index,\n          date,\n          price: price || 0,\n          variationDMinusOne,\n          firstDateVariation\n        };\n      });\n      return variances;\n    } catch (e) {\n      return [];\n    }\n  }\n  getValuePercent(value, nextNumber) {\n    return value * 100 / nextNumber;\n  }\n  calculateVariance(currentPrice, nextPrice) {\n    const currentResult = this.getValuePercent(currentPrice, nextPrice);\n    return currentResult > 100 ? currentResult - 100 : 100 - currentResult;\n  }\n  log(message) {\n    this.messageService.add(`FinanceService: ${message}`);\n  }\n}\nFinanceService.ɵfac = function FinanceService_Factory(t) {\n  return new (t || FinanceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nFinanceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FinanceService,\n  factory: FinanceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,EAAcC,GAAG,QAAQ,MAAM;AAC3C,SAASC,WAAW,QAAQ,mCAAmC;;;;AAS/D,OAAM,MAAOC,cAAc;EAGzBC,YACUC,IAAgB,EAChBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAJhB,eAAU,GAAGJ,WAAW,CAACK,OAAO;EAKrC;EAEHC,MAAM,CAACC,KAAa,EAAEC,KAAK,GAAG,EAAE;IAC9B,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAW,GAAG,IAAI,CAACC,UAAU,IAAIH,KAAK,EAAE,CAAC,CAACI,IAAI,CAChEb,GAAG,CAAEc,OAAiB,IAAK,IAAI,CAACC,eAAe,CAACD,OAAO,EAAEJ,KAAK,CAAC,CAAC,EAChET,GAAG,CAAC,MAAM,IAAI,CAACe,GAAG,CAAC,sBAAsBP,KAAK,EAAE,CAAC,CAAC,CACnD;EACH;EAEQM,eAAe,CAACD,OAAiB,EAAEJ,KAAa;IACtD,IAAI;MACF,MAAMO,MAAM,GAAGH,OAAO,CAACI,KAAK,CAACD,MAAM,CAAC,CAAC,CAAC;MACtC,MAAME,UAAU,GAAGF,MAAM,CAACG,SAAS,CAACC,KAAK,CAACX,KAAK,GAAG,CAAC,CAAC,CAAC;MACrD,MAAMY,MAAM,GAAGL,MAAM,CAACM,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACJ,KAAK,CAACX,KAAK,GAAG,CAAC,CAAC,CAAC;MAChE,MAAMgB,SAAS,GAAGJ,MAAM,CAACtB,GAAG,CAAC,CAAC2B,KAAU,EAAEC,KAAa,KAAI;QACzD,MAAMC,IAAI,GAAGV,UAAU,CAACS,KAAK,CAAC,GAAG,IAAI;QAErC,IAAIE,kBAAkB,GAAG,CAAC;QAC1B,IAAIC,kBAAkB,GAAG,CAAC;QAE1B,IAAIH,KAAK,GAAG,CAAC,IAAID,KAAK,GAAG,CAAC,EAAE;UAC1BG,kBAAkB,GAAG,IAAI,CAACE,iBAAiB,CAACL,KAAK,EAAEL,MAAM,CAACM,KAAK,GAAG,CAAC,CAAC,CAAC;UACrEG,kBAAkB,GAAG,IAAI,CAACC,iBAAiB,CAACL,KAAK,EAAEL,MAAM,CAAC,CAAC,CAAC,CAAC;;QAG/D,OAAO;UACLW,GAAG,EAAEL,KAAK;UACVC,IAAI;UACJF,KAAK,EAAEA,KAAK,IAAI,CAAC;UACjBG,kBAAkB;UAClBC;SACa;MACjB,CAAC,CAAC;MAEF,OAAOL,SAAS;KACjB,CAAC,OAAOQ,CAAC,EAAE;MACV,OAAO,EAAE;;EAEb;EAEQC,eAAe,CAACC,KAAa,EAAEC,UAAkB;IACvD,OAAQD,KAAK,GAAG,GAAG,GAAIC,UAAU;EACnC;EAEQL,iBAAiB,CAACM,YAAoB,EAAEC,SAAiB;IAC/D,MAAMC,aAAa,GAAG,IAAI,CAACL,eAAe,CAACG,YAAY,EAAEC,SAAS,CAAC;IACnE,OAAOC,aAAa,GAAG,GAAG,GAAGA,aAAa,GAAG,GAAG,GAAG,GAAG,GAAGA,aAAa;EACxE;EAEQxB,GAAG,CAACyB,OAAe;IACzB,IAAI,CAACnC,cAAc,CAACoC,GAAG,CAAC,mBAAmBD,OAAO,EAAE,CAAC;EACvD;;AAzDWtC,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAwC,SAAdxC,cAAc;EAAAyC,YAFb;AAAM","names":["map","tap","environment","FinanceService","constructor","http","messageService","baseUrl","getAll","ativo","limit","get","financeUrl","pipe","finance","formattedResult","log","result","chart","timestamps","timestamp","slice","quotes","indicators","quote","open","variances","price","index","date","variationDMinusOne","firstDateVariation","calculateVariance","day","e","getValuePercent","value","nextNumber","currentPrice","nextPrice","currentResult","message","add","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pablo\\OneDrive\\Documentos\\Projetos\\grafico-variacao\\src\\app\\core\\services\\finance.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map, Observable, tap } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { MessageService } from './message.service';\nimport { IFinance } from '../models/finance.model';\nimport { IVariation } from '../models/variation.model';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FinanceService {\n  private financeUrl = environment.baseUrl;\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService\n  ) {}\n\n  getAll(ativo: string, limit = 30): Observable<IVariation[]> {\n    return this.http.get<IFinance>(`${this.financeUrl}/${ativo}`).pipe(\n      map((finance: IFinance) => this.formattedResult(finance, limit)),\n      tap(() => this.log(`Consultou o ativo: ${ativo}`))\n    );\n  }\n\n  private formattedResult(finance: IFinance, limit: number): IVariation[] {\n    try {\n      const result = finance.chart.result[0];\n      const timestamps = result.timestamp.slice(limit * -1);\n      const quotes = result.indicators.quote[0].open.slice(limit * -1);\n      const variances = quotes.map((price: any, index: number) => {\n        const date = timestamps[index] * 1000;\n\n        let variationDMinusOne = 0;\n        let firstDateVariation = 0;\n\n        if (index > 0 && price > 0) {\n          variationDMinusOne = this.calculateVariance(price, quotes[index - 1]);\n          firstDateVariation = this.calculateVariance(price, quotes[0]);\n        }\n\n        return {\n          day: index,\n          date,\n          price: price || 0,\n          variationDMinusOne,\n          firstDateVariation,\n        } as IVariation;\n      });\n\n      return variances;\n    } catch (e) {\n      return [];\n    }\n  }\n\n  private getValuePercent(value: number, nextNumber: number): number {\n    return (value * 100) / nextNumber;\n  }\n\n  private calculateVariance(currentPrice: number, nextPrice: number) {\n    const currentResult = this.getValuePercent(currentPrice, nextPrice);\n    return currentResult > 100 ? currentResult - 100 : 100 - currentResult;\n  }\n\n  private log(message: string): void {\n    this.messageService.add(`FinanceService: ${message}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}